

include $(TOPDIR)/config.mk
#$(warning $(PLATFORM_CPPFLAGS))
ifdef SOC
LDSCRIPT= $(TOPDIR)/firmware/$(ARCH)/$(CPU)/$(SOC)/u-boot.lds
T=$(TOPDIR)/firmware/$(ARCH)/$(CPU)/$(SOC)/Makefile
else
LDSCRIPT= $(TOPDIR)/firmware/$(ARCH)/$(CPU)/u-boot.lds
T=$(TOPDIR)/firmware/$(ARCH)/$(CPU)/Makefile
endif
PLATFORM_CPPFLAGS+=-DCONFIG_AMLROM_SPL

LDFLAGS	= -Bstatic -T $(obj)firmware.lds  $(PLATFORM_LDFLAGS)
BURNLDFLAGS	= -Bstatic -T $(obj)burner.lds  $(PLATFORM_LDFLAGS)
#AFLAGS	+= -DAML_DEBUG_ROM -DTEXT_BASE=$(TEXT_BASE)  -I$(OBJTREE)
#CFLAGS	+= -DAML_DEBUG_ROM -DTEXT_BASE=$(TEXT_BASE)  -I$(OBJTREE)
#CFLAGS :=  -g --cpu cortex-a9  -Ospace  --c99 -W  --thumb \
#				 $(filter -D%,$(CFLAGS)) $(filter -I%,$(CFLAGS))
#-Ospace
#LDFLAGS = --cpu cortex-a9 --info totals --info unused --info inputs --scatter firmware.scat --entry _start --keep=rom_spl_arm.o\(.magic\)
#AFLAGS = -g --cpu cortex-a9  $(filter -I%,$(CFLAGS))


CFLAGS	:=$(CFLAGS:-marm=-mthumb)
#CFLAGS	:=$(CFLAGS:-mno-thumb-interwork=)
CFLAGS	:=$(CFLAGS:-fPIC=)
CFLAGS	:=$(CFLAGS:-ffixed-r8=)
CFLAGS	+=  -DCONFIG_AML_ROMBOOT_SPL  -MD -Wno-unused-function -mno-long-calls
AFLAGS	+= -DCONFIG_AMLROM_SPL -DTEXT_BASE=$(TEXT_BASE) -DUCL_TEXT_BASE=$(UCL_TEXT_BASE) -MD
#CONFIG_AML_ROMBOOT_SPL
#CC=armcc --translate_gcc --gnu --c99

ifndef CONFIG_M6_SECU_BOOT
SOBJS	 = rom_spl.o magic.o acs_entry.o
else
SOBJS	 = rom_spl.o
endif

COBJS	 = spl.o

OBJS	:= $(addprefix $(obj),$(SOBJS)  )
__OBJS	:= $(SOBJS) $(COBJS)

BURNOBJS:= $(addprefix $(obj),$(SOBJS) $(COBJS) burn.o )
ifdef CONFIG_SUPPORT_CUSOTMER_BOARD
VPATH_LIST=	$(TOPDIR)/customer/board/$(BOARD) \
						$(SRCTREE)/$(CPUDIR)/$(SOC) \
						$(SRCTREE)/$(CPUDIR)/common	\
						$(SRCTREE)/$(CPUDIR)  			\
						$(SRCTREE)/common
else
VPATH_LIST=	$(TOPDIR)/board/$(BOARDDIR) \
						$(SRCTREE)/$(CPUDIR)/$(SOC) \
						$(SRCTREE)/$(CPUDIR)/common	\
						$(SRCTREE)/$(CPUDIR)  			\
						$(SRCTREE)/common
endif

VPATH_LIST:=$(VPATH_LIST:%=%/firmware)
CFLAGS+=$(VPATH_LIST:%=-I%)
vpath %.c $(VPATH_LIST)
vpath %.S $(VPATH_LIST)
vpath %.s $(VPATH_LIST)
origin_LDS=$(abspath firmware.lds)
target_LDS=$(abspath $(obj)firmware.lds)
ifeq ( $(origin_LDS),$(target_LDS))
	target_LDS=$(OBJTREE)/firmware.lds
endif
ifdef CONFIG_M6
ALL	= $(FIRMWARE) $(basename $(FIRMWARE)).out \
			$(dir $(FIRMWARE))usb_spl.bin $(dir $(FIRMWARE))usb_spl.out
ELFFILES=$(basename $(FIRMWARE)).out $(dir $(FIRMWARE))usb_spl.out

all: $(ALL) $(ELFFILES)

%.bin:	%.out
	$(OBJCOPY) ${OBJCFLAGS} -O binary $< $@
$(basename $(FIRMWARE)).out:$(OBJS) $(obj)spl.o $(target_LDS)
$(dir $(FIRMWARE))usb_spl.out:$(OBJS) $(obj)usb_spl.o $(obj)firmware.lds
	$(LD) $(LDFLAGS) $(filter %.o,$^) $(PLATFORM_LIBS) -Map $(@:%=%.map) --cref -o $@
	
else
ALL	= $(FIRMWARE) $(basename $(FIRMWARE)).out 
ELFFILES=$(basename $(FIRMWARE)).out 

all: $(ALL) $(ELFFILES)

%.bin:	%.out
	$(OBJCOPY) ${OBJCFLAGS} -O binary $< $@
$(basename $(FIRMWARE)).out:$(OBJS) $(obj)spl.o $(target_LDS)
endif
%.out:
	$(LD) $(LDFLAGS) $(filter %.o,$^) $(UCL_BOOTLIBS) $(PLATFORM_LIBS) \
		-Map $(@:%=%.map) --cref \
		-o $@
$(target_LDS):$(origin_LDS)
	$(CPP) $(CPPFLAGS)   $(LDPPFLAGS) -std=c99 -D__ASSEMBLY__ -P - <$^ >$@

sinclude $(wildcard $(obj)*.d)



#########################################################################
